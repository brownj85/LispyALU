// File: lexer.v
// Generated by MyHDL 0.10
// Date: Mon Nov 19 17:19:37 2018


module lexer (
    go,
    ret,
    store,
    char_in,
    inst,
    lut_out,
    mem_in,
    mem_addr,
    clock,
    reset_n,
    err_flag
);


input go;
output reg ret;

output reg store;

input [7:0] char_in;
output [9:0] inst;
wire [9:0] inst;
input [2:0] lut_out;
output [15:0] mem_in;
wire [15:0] mem_in;
input [7:0] mem_addr;
input clock;
input reset_n;
output reg  err_flag;

reg [7:0] char_buffer;
reg [15:0] convert_buffer;
reg [7:0] i_body_buffer;
reg [1:0] i_mask_buffer;


wire is_digit;
reg [2:0] lut_buffer;
wire op_valid;

reg [2:0] state;
reg [2:0] state_next;

assign inst[10-1:8] = i_mask_buffer;
assign inst[8-1:0] = i_body_buffer;


always @(posedge clock) begin: LEXER_CTRL_SIGNALS
    reg [3-1:0] state_ctr;
    char_buffer <= char_in;
    lut_buffer <= lut_out;
    case (state)
        3'b100: begin
            err_flag <= 0;
            ret <= 0;
            store <= 0;
            convert_buffer <= 0;
        end
        3'b010: begin
            convert_buffer <= ($signed({1'b0, convert_buffer}) + (($signed({1'b0, char_buffer}) - 48) * (10 ** state_ctr)));
            i_body_buffer <= mem_addr;
            i_mask_buffer <= lut_buffer[2-1:0];
            if ((state_next == 3'b100)) begin
                store <= 1;
                ret <= 1;
            end
        end
        3'b001: begin
            i_body_buffer <= char_buffer;
            i_mask_buffer <= lut_buffer[2-1:0];
            ret <= 1;
        end
        3'b000: begin
            err_flag <= 1;
        end
    endcase
    state <= state_next;
    if ((state_next == state)) begin
        state_ctr <= (state_ctr + 1);
    end
    else begin
        state_ctr <= 0;
    end
end


always @(reset_n, err_flag, is_digit, char_in, op_valid) begin: LEXER_STATE_TABLE
    if ((reset_n == 0)) begin
        state_next = 3'b100;
    end
    else if ((err_flag == 1)) begin
        state_next = 3'b000;
    end
    else if ((is_digit == 1)) begin
        state_next = 3'b010;
    end
    else if ((char_in == 32)) begin
        state_next = 3'b100;
    end
    else if ((op_valid == 1)) begin
        state_next = 3'b001;
    end
    else begin
        state_next = 3'b000;
    end
end



assign mem_in = convert_buffer;
assign op_valid = (lut_out[0] || lut_out[1]);
assign is_digit = lut_out[2];
assign inst = inst_int;

endmodule
