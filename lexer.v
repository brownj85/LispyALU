// File: lexer.v
// Generated by MyHDL 0.10
// Date: Wed Nov 21 18:38:39 2018


`timescale 1ns/10ps

module lexer (
    ret,
    char_in,
    inst,
    lut_out,
    ram_addr_next,
    clock,
    reset_n,
    err_flag
);


output ret;
reg ret;
input [7:0] char_in;
output [9:0] inst;
wire [9:0] inst;
input [2:0] lut_out;
input [7:0] ram_addr_next;
input clock;
input reset_n;
output err_flag;
reg err_flag;

reg [7:0] char_buffer;
reg expect_val;
reg [7:0] i_body_buffer;
reg [1:0] i_mask_buffer;
wire [9:0] inst_wire;
wire is_digit;
reg [2:0] lut_buffer;
wire op_valid;
reg [1:0] state;
reg [1:0] state_next;

assign inst_wire[10-1:8] = i_mask_buffer;
assign inst_wire[8-1:0] = i_body_buffer;


always @(posedge clock) begin: LEXER_CTRL_SIGNALS
    char_buffer <= char_in;
    lut_buffer <= lut_out;
    case (state)
        2'b11: begin
            err_flag <= 0;
            ret <= 0;
            if ((char_buffer == 40)) begin
                expect_val <= 0;
            end
        end
        2'b10: begin
            i_body_buffer <= ram_addr_next[8-1:0];
            i_mask_buffer <= lut_buffer[2-1:0];
            if ((state_next != 2'b10)) begin
                ret <= 1;
            end
        end
        2'b01: begin
            i_body_buffer <= char_buffer;
            i_mask_buffer <= lut_buffer[2-1:0];
            expect_val <= 1;
            ret <= 1;
        end
        2'b00: begin
            err_flag <= 1;
        end
    endcase
    state <= state_next;
end


always @(reset_n, err_flag, is_digit, char_in, op_valid, expect_val) begin: LEXER_STATE_TABLE
    if ((reset_n == 0)) begin
        state_next = 2'b11;
    end
    else if ((err_flag == 1)) begin
        state_next = 2'b00;
    end
    else if ((is_digit == 1)) begin
        state_next = 2'b10;
    end
    else if (((char_in == 32) || (char_in == 40))) begin
        state_next = 2'b11;
    end
    else if ((op_valid == 1)) begin
        if (((char_in == 45) && expect_val)) begin
            state_next = 2'b10;
        end
        else begin
            state_next = 2'b01;
        end
    end
    else begin
        state_next = 2'b00;
    end
end



assign op_valid = (lut_out[0] || lut_out[1]);
assign is_digit = lut_out[2];



assign inst = inst_wire[10-1:0];

endmodule
