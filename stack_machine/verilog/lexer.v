// File: lexer.v
// Generated by MyHDL 0.10
// Date: Wed Nov 28 12:54:00 2018


`timescale 1ns/10ps

module lexer (
    char_in,
    stack_in,
    push,
    err_flag,
    clock,
    reset_n
);


input [7:0] char_in;
output [17:0] stack_in;
wire [17:0] stack_in;
output push;
reg push;
output err_flag;
reg err_flag;
input clock;
input reset_n;

reg [2:0] state_next;
reg [2:0] state;
wire is_op;
wire is_digit;
reg conv_err;
reg sign;
reg signed [15:0] result;
reg [1:0] inst_mask;
reg signed [15:0] inst_desc;
wire [17:0] inst;
reg [2:0] dec_to_bin_converter0_ctr;
reg [15:0] dec_to_bin_converter0_digit_buffer [0:6-1];
wire [1:0] char_lut0_mask_table [0:128-1];

assign inst[18-1:16] = inst_mask;
assign inst[16-1:0] = inst_desc;


always @(reset_n, is_digit, is_op, char_in, err_flag, state) begin: LEXER_STATE_TABLE
    if ((reset_n == 0)) begin
        state_next = 3'b001;
    end
    else if ((err_flag == 1)) begin
        state_next = 3'b000;
    end
    else if ((state == 3'b001)) begin
        case (char_in)
            'h20: begin
                state_next = 3'b001;
            end
            'h28: begin
                state_next = 3'b101;
            end
            default: begin
                state_next = 3'b000;
            end
        endcase
    end
    else if ((state == 3'b101)) begin
        if (is_op) begin
            state_next = 3'b010;
        end
        else begin
            state_next = 3'b000;
        end
    end
    else if ((state == 3'b010)) begin
        if ((char_in == 32)) begin
            state_next = 3'b010;
        end
        else if ((char_in == 45)) begin
            state_next = 3'b011;
        end
        else if (is_digit) begin
            state_next = 3'b100;
        end
        else if ((char_in == 40)) begin
            state_next = 3'b101;
        end
        else if ((char_in == 0)) begin
            state_next = 3'b001;
        end
        else begin
            state_next = 3'b000;
        end
    end
    else if ((state == 3'b011)) begin
        if (is_digit) begin
            state_next = 3'b100;
        end
        else begin
            state_next = 3'b000;
        end
    end
    else if ((state == 3'b100)) begin
        if (is_digit) begin
            state_next = 3'b100;
        end
        else if (((char_in == 32) || (char_in == 41))) begin
            state_next = 3'b010;
        end
        else begin
            state_next = 3'b000;
        end
    end
end


always @(posedge clock) begin: LEXER_CONTROL
    if ((reset_n == 0)) begin
        sign <= 0;
        push <= 0;
        err_flag <= 0;
    end
    else if ((state == 3'b101)) begin
        push <= 1;
        inst_desc <= char_in;
        inst_mask <= 3;
    end
    else if ((state == 3'b010)) begin
        push <= 0;
        sign <= 0;
    end
    else if ((state == 3'b011)) begin
        sign <= 1;
    end
    else if ((state == 3'b100)) begin
        if ((state_next == 3'b010)) begin
            push <= 1;
            inst_desc <= result;
            inst_mask <= 0;
        end
    end
    state <= state_next;
end


always @(posedge clock) begin: LEXER_DEC_TO_BIN_CONVERTER0_DATA
    integer i;
    if ((reset_n == 0)) begin
        dec_to_bin_converter0_ctr <= 0;
        conv_err <= 0;
    end
    else if (is_digit) begin
        if ((dec_to_bin_converter0_ctr == 7)) begin
            conv_err <= 1;
        end
        dec_to_bin_converter0_ctr <= (dec_to_bin_converter0_ctr + 1);
    end
    else begin
        dec_to_bin_converter0_ctr <= 0;
        conv_err <= 0;
    end
    for (i=0; i<6; i=i+1) begin
        if ((i > $signed({1'b0, dec_to_bin_converter0_ctr}))) begin
            dec_to_bin_converter0_digit_buffer[i] <= 0;
        end
        else if (((i == $signed({1'b0, dec_to_bin_converter0_ctr})) && is_digit)) begin
            dec_to_bin_converter0_digit_buffer[dec_to_bin_converter0_ctr] <= char_in[4-1:0];
        end
        else if (is_digit) begin
            dec_to_bin_converter0_digit_buffer[i] <= ((dec_to_bin_converter0_digit_buffer[i] << 3) + (dec_to_bin_converter0_digit_buffer[i] << 1));
        end
    end
end


always @(sign, dec_to_bin_converter0_digit_buffer[0], dec_to_bin_converter0_digit_buffer[1], dec_to_bin_converter0_digit_buffer[2], dec_to_bin_converter0_digit_buffer[3], dec_to_bin_converter0_digit_buffer[4], dec_to_bin_converter0_digit_buffer[5]) begin: LEXER_DEC_TO_BIN_CONVERTER0_ADD
    if (sign) begin
        result = (-(((((dec_to_bin_converter0_digit_buffer[0] + dec_to_bin_converter0_digit_buffer[1]) + dec_to_bin_converter0_digit_buffer[2]) + dec_to_bin_converter0_digit_buffer[3]) + dec_to_bin_converter0_digit_buffer[4]) + dec_to_bin_converter0_digit_buffer[5]));
    end
    else begin
        result = (((((dec_to_bin_converter0_digit_buffer[0] + dec_to_bin_converter0_digit_buffer[1]) + dec_to_bin_converter0_digit_buffer[2]) + dec_to_bin_converter0_digit_buffer[3]) + dec_to_bin_converter0_digit_buffer[4]) + dec_to_bin_converter0_digit_buffer[5]);
    end
end



assign is_digit = char_lut0_mask_table[char_in][1];
assign is_op = char_lut0_mask_table[char_in][0];



assign stack_in = inst;

endmodule
