// File: control_unit.v
// Generated by MyHDL 0.10
// Date: Wed Nov 28 12:54:00 2018


`timescale 1ns/10ps

module control_unit (
    ret,
    go,
    done,
    pr_stack_pop,
    pr_stack_top,
    pr_stack_empty,
    alu_go,
    alu_op,
    alu_a,
    alu_b,
    alu_out,
    alu_done,
    err_flag,
    clock,
    reset_n
);


output ret;
reg ret;
input go;
output done;
reg done;
output pr_stack_pop;
reg pr_stack_pop;
input [17:0] pr_stack_top;
input pr_stack_empty;
output alu_go;
reg alu_go;
output [15:0] alu_op;
reg [15:0] alu_op;
output [15:0] alu_a;
reg [15:0] alu_a;
output [15:0] alu_b;
reg [15:0] alu_b;
input [15:0] alu_out;
input alu_done;
output err_flag;
reg err_flag;
input clock;
input reset_n;

reg [1:0] state;
reg [7:0] stack_ptr;
reg [15:0] stack [0:130-1];



always @(posedge clock) begin: CONTROL_UNIT_LOGIC
    if ((reset_n == 0)) begin
        stack_ptr <= 0;
        alu_go <= 0;
        done <= 0;
        state <= 2'b00;
        err_flag <= 0;
    end
    else if ((state == 2'b00)) begin
        if (((!pr_stack_empty) && go)) begin
            pr_stack_pop <= 1;
            state <= 2'b10;
        end
    end
    else if ((state == 2'b10)) begin
        if (pr_stack_empty) begin
            state <= 2'b01;
        end
        case (pr_stack_top[18-1:16])
            'h0: begin
                stack[($signed({1'b0, stack_ptr}) - 1)] <= pr_stack_top[16-1:0];
                stack_ptr <= (stack_ptr - 1);
            end
            'h3: begin
                alu_op <= pr_stack_top[16-1:0];
                alu_go <= 1;
                alu_a <= $signed(stack[stack_ptr]);
                alu_b <= $signed(stack[(stack_ptr + 1)]);
                pr_stack_pop <= 0;
                state <= 2'b11;
            end
        endcase
    end
    else if ((state == 2'b11)) begin
        if (alu_done) begin
            stack[(stack_ptr + 1)] = $signed(alu_out);
            stack_ptr <= (stack_ptr + 1);
            state <= 2'b10;
            alu_go <= 0;
            pr_stack_pop <= 1;
        end
    end
    else if ((state == 2'b01)) begin
        ret <= stack[stack_ptr];
        done <= 1;
    end
end

endmodule
