// File: converter.v
// Generated by MyHDL 0.10
// Date: Wed Nov 21 18:38:39 2018


`timescale 1ns/10ps

module converter (
    char_in,
    lut_out,
    ram_addr_next,
    ram_write,
    ram_wr_addr,
    ram_we,
    ram_alloc,
    err_flag,
    clock,
    reset_n
);


input [7:0] char_in;
input [2:0] lut_out;
input [7:0] ram_addr_next;
output signed [15:0] ram_write;
reg signed [15:0] ram_write;
output [7:0] ram_wr_addr;
reg [7:0] ram_wr_addr;
output ram_we;
reg ram_we;
output ram_alloc;
reg ram_alloc;
output err_flag;
reg err_flag;
input clock;
input reset_n;

reg [2:0] ctr;
reg err_st;
reg lut_buffer;
reg signed [15:0] result;
reg sign;
reg [14:0] digit_buffer [0:6-1];



always @(posedge clock) begin: CONVERTER_DATA
    integer i;
    if ((reset_n == 0)) begin
        ram_alloc <= 0;
        ctr <= 0;
        err_st <= 0;
    end
    else if (err_st) begin
        err_flag <= 1;
    end
    else if ((char_in == 45)) begin
        sign <= 1;
    end
    else if (lut_out[2]) begin
        ram_we <= 0;
        ram_alloc <= 0;
        ram_wr_addr <= ram_addr_next;
        ctr <= (ctr + 1);
    end
    else begin
        if ((lut_buffer == 1)) begin
            ram_alloc <= 1;
            ram_we <= 1;
            ram_write <= result;
        end
        else begin
            ram_alloc <= 0;
            ram_we <= 0;
        end
        sign <= 0;
        ctr <= 0;
    end
    for (i=0; i<6; i=i+1) begin
        if ((i > $signed({1'b0, ctr}))) begin
            digit_buffer[i] <= 0;
        end
        else if ((i == $signed({1'b0, ctr}))) begin
            digit_buffer[ctr] <= char_in[4-1:0];
        end
        else begin
            digit_buffer[i] <= ((digit_buffer[i] << 3) + (digit_buffer[i] << 1));
        end
    end
    lut_buffer <= lut_out[2];
end


always @(sign, digit_buffer[0], digit_buffer[1], digit_buffer[2], digit_buffer[3], digit_buffer[4], digit_buffer[5]) begin: CONVERTER_ADD
    if (sign) begin
        result = (-(((((digit_buffer[0] + digit_buffer[1]) + digit_buffer[2]) + digit_buffer[3]) + digit_buffer[4]) + digit_buffer[5]));
    end
    else begin
        result = (((((digit_buffer[0] + digit_buffer[1]) + digit_buffer[2]) + digit_buffer[3]) + digit_buffer[4]) + digit_buffer[5]);
    end
end

endmodule
